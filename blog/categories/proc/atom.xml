<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: proc | After Hours Googling]]></title>
  <link href="http://chenghw.github.io/blog/categories/proc/atom.xml" rel="self"/>
  <link href="http://chenghw.github.io/"/>
  <updated>2015-12-07T07:55:41-05:00</updated>
  <id>http://chenghw.github.io/</id>
  <author>
    <name><![CDATA[Ho Won Cheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Procs and Lambdas]]></title>
    <link href="http://chenghw.github.io/blog/2015/10/27/procs-and-lambdas/"/>
    <updated>2015-10-27T09:15:10-04:00</updated>
    <id>http://chenghw.github.io/blog/2015/10/27/procs-and-lambdas</id>
    <content type="html"><![CDATA[<p>I am a big believer in fundamentals and foundation. In grade school I was horrific in Spanish. Being close to failing and having to repeat the previous years Spanish class, my parents sent me to summer school. I learned the fundamentals of the language and went into the following year understanding concepts which I didn't have the tools to comprehend previously.</p>




<p>We were told a quote early on in the semester which has stuck with me. It was along the lines of, "The problem isn't with Rails, but with your Ruby." I took away to truly understand Rails was to truly understand the fundaments and the foundation that Rails was built on.</p>




<p>Before diving into Proc and Lambdas which I saw as one of those fundamentals/building blocks of the Ruby language, we must go over what a Block is first.</p>




<h2>Blocks</h2>


<p>A block is a block of code or a code block, thus the name <strong>block</strong>. A list of instructions for your code to follow. Blocks can be identified by do...end or { }. There is a saying in Ruby land that everything in Ruby is an object, however that does not apply here. A block is not an object! Which brings us to procs and lambdas.</p>




<h2>Procs</h2>


<p>Proc, stands for <strong>proc</strong>edure, is a block of code which is an object. This means procs can be passed through in method arguments, be something a method returns and have methods called upon them.</p>


<pre><code class="ruby Creating a proc">square = Proc.new{ |x| x**2 }

square = Proc.new do |x|
  x**2
end
</code></pre>

<p>Up until now we mostly been using blocks in enumerables. Procs can take the place of blocks in enumerables.</p>


<pre><code class="ruby Using a proc in an enumerable">[ 1, 2, 3, 5, 7 ].map(&amp;square)
 =&gt; [1, 4, 9, 25, 49] 
</code></pre>

<p>But lets say you don&rsquo;t want to just pass in 1 value. Using an iterator now seems to not be the right tool for the job. There is the call method.
<figure class='code'><figcaption><span>Call method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="mi">15</span> <span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">square</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">225</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; square.call( 15 )</span>
</span><span class='line'><span class="sr"> =&gt; 225</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Another benefit procs over blocks is that they can be returned.</p>


<pre><code class="ruby Proc as a return">class Player
  attr_accessor :coins
  def initialize
    @coins = 1000
  end
end

class Team
  attr_accessor :status
  def result
    if status
      Proc.new{ |p| p.coins += 150 }
    else
      Proc.new{ |p| p.coins -= 100 }
    end
  end
end

player1 = Player.new
player2 = Player.new
team = Team.new
team.status = true
proc = team.result

[ player1, player2 ].each(&amp;proc)
=&gt; [#&lt;Player:0x007f9682936fa0 @coins=1150&gt;, #&lt;Player:0x007f968204d1a0 @coins=1150&gt;]

player1.coins
=&gt; 1150
</code></pre>

<h2>Lambda</h2>


<p>A lambda is also a block of code which is an object. This is because a lambda is apart of the Proc class.</p>


<pre><code class="ruby Creating a lambda">woofs = lambda{ |x| "Woof!"*x }

woofs = lambda do |x|
  "Woof!"*x
end

=&gt; &lt;Proc:0x007f9683183dc0@(irb):152 (lambda)&gt; 
</code></pre>

<h2>Procs vs Lambdas</h2>


<p>1 - Procs and lambdas treat arguments differently. Procs do not check for the correct number or arguments while lambdas do.</p>


<pre><code class="ruby Argument validation">hello = Proc.new{ |name| "Hello #{name}!" }
goodbye = lambda{ |name| "Good-bye #{name}!" }
hello.call
=&gt; "Hello !"
goodbye.call
=&gt; ArgumentError: wrong number of arguments (0 for 1)
</code></pre>

<p>2 - Proc and lambdas treat returns differently. A return inside a proc will be treated as a return for the entire method which it is inside, while a return inside a lambda will only be treated as the return for inside the lambda.</p>


<pre><code class="ruby Returns">def proc_return
  proc = Proc.new do
    return "Hi from inside the proc!"
    puts "Do you see me?"
  end
  puts proc.call
  puts "Does this even show up?"
end

proc_return
 =&gt; "Hi from inside the proc!" 

def lambda_return
  lambda = lambda do
    return "Hi from inside the lambda"
    puts "Do you see me?"
  end
  puts lambda.call
  puts "Does this even show up?"
end

lambda_return
Hi from inside the lambda
Does this even show up?
 =&gt; nil 
</code></pre>

<h2> & </h2>


<pre><code class="ruby & Clarification">sym = :upcase
[ 'a', 'b', 'c' ].map( &amp;:upcase )
[ 'a', 'b', 'c' ].map{ |letter| letter.send( sym ) }
=&gt; ["A", "B", "C"] 
</code></pre>

<h2> Additional Examples </h2>


<pre><code class="ruby Examples">animal_sounds = {
  'cat' =&gt; lambda{ |x| "Meow"*x},
  'dog' =&gt; lambda{ |x| "Woof"*x},
  'pig' =&gt; lambda{ |x| "Oink"*x},
  'bird' =&gt; lambda{ |x| "Kakaw"*x}
}
animal_sounds['bird'].call(2)
=&gt; "KakawKakaw" 
</code></pre>
]]></content>
  </entry>
  
</feed>
