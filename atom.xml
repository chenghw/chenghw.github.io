<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[After Hours Googling]]></title>
  <link href="http://chenghw.github.io/atom.xml" rel="self"/>
  <link href="http://chenghw.github.io/"/>
  <updated>2015-12-21T18:37:20-05:00</updated>
  <id>http://chenghw.github.io/</id>
  <author>
    <name><![CDATA[Ho Won Cheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binary Search Tree in Ruby]]></title>
    <link href="http://chenghw.github.io/blog/2015/12/21/binary-search-tree-in-ruby/"/>
    <updated>2015-12-21T15:01:14-05:00</updated>
    <id>http://chenghw.github.io/blog/2015/12/21/binary-search-tree-in-ruby</id>
    <content type="html"><![CDATA[<p>I am officially a Flatiron School graduate!! 12 weeks of learning Ruby, Object Oriented Programming, Test Driven Development, RSpec, Model View Controller, REST, CRUD, rack middleware, Sinatra, Ruby on Rails, Active Record, SQL, JavaScript, jQuery, AJAX, Handlebars and Ember.js. But most importantly coming out with the knowledge of how to approach and learn a new language. I look forward to my life after Flatiron and what new languages and frameworks I&rsquo;ll learn.</p>

<p>I wanted to touch upon a topic we started covering in our last week at Flatiron, which were data structures and sorting algorithms. This week reminded me of my few years of taking computer science courses, creating our own stacks, queues and linked lists. Writing sorting algorithms such as quicksort, mergesort and bubble sort. I was ecstatic to find out we were covering these topics! Remembering how much fun I had with these is partially what got me to change careers and enroll in Flatiron School in the first place. Back in week 1 I asked myself, what kind of sort does Ruby use? I learned so many sorts long ago, which one is it? After some Google-ing, interestingly enough, Ruby uses the quicksort algorithm for its sort method over mergesort.</p>

<h1>Binary Search Tree</h1>


<p>So one of my favorite problems that I came across was constructing your own Binary Search Tree(BST). I am going to walk through my process, but first we need to know what a BST is. A BST is a series of connecting nodes, where each node contains data, a left and a right. The left and right are pointers to a subtree of nodes where left is less than or equal to and right is greater than.</p>

<p>With this information we can start by creating our Binary Search Tree class which will represent our data structure. The walkthrough will consist of the structure and inserting into the BST.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BST</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
Back to what a BST contains: data, left and right. Data will represent the data we store and left and right will represent subtrees.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BST</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
Great! Now that we have the basic structure of the BST, we will need to be able to insert data into our BST class. Lets create a insert method which takes in 1 argument, data. I&rsquo;m going to go ahead and pseudocode my thought process of how I think it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 1 - Start at top of the tree</span>
</span><span class='line'>    <span class="c1"># 2 - Find which direction insert should be</span>
</span><span class='line'>    <span class="c1"># 3 - Check that direction if it is nil</span>
</span><span class='line'>    <span class="c1"># 3a - If nil insert into that location</span>
</span><span class='line'>    <span class="c1"># 3b - If not nil, change top of tree location to that node</span>
</span><span class='line'>    <span class="c1"># 4 - Repeat step 1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
We start at the top of the tree and keep track of the location. Following this, compare the data being inserted into our tree with the current location. This will determine if we are going left or right. If that direction results in a nil, we have reached our destination! We insert here, but if not we will need to change the current location to the top of the subtree.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 1 - Start at top of the tree √</span>
</span><span class='line'>    <span class="c1"># 2 - Find which direction insert should be √</span>
</span><span class='line'>    <span class="c1"># 3 - Check that direction if it is nil √</span>
</span><span class='line'>    <span class="c1"># 3a - If nil insert into that location √</span>
</span><span class='line'>    <span class="c1"># 3b - If not nil, change top of tree location to that node √</span>
</span><span class='line'>    <span class="c1"># 4 - Repeat step 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">current_location</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">current_location</span><span class="o">.</span><span class="n">data</span> <span class="o">&gt;=</span> <span class="n">data</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_location</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>        <span class="n">current_location</span> <span class="o">=</span> <span class="n">current_location</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">current_location</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="no">BST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_location</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>        <span class="n">current_location</span> <span class="o">=</span> <span class="n">current_location</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">current_location</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="no">BST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
We want to keep doing this process until the data has been inserted into the correct location. Since the number of times this loop will run is unknown, a while or until loop will do the trick with a placeholder variable for confirmation of when the loop is finished.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current_location</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">inserted</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">until</span> <span class="n">inserted</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_location</span><span class="o">.</span><span class="n">data</span> <span class="o">&gt;=</span> <span class="n">data</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">current_location</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>          <span class="n">current_location</span> <span class="o">=</span> <span class="n">current_location</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">current_location</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="no">BST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>          <span class="n">inserted</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">current_location</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>          <span class="n">current_location</span> <span class="o">=</span> <span class="n">current_location</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">current_location</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="no">BST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>          <span class="n">inserted</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
Running some tests that were developed prior and eureka!! It works! While our task is complete, I&rsquo;m not satisfied. To me this looks dirty. The 2 variables declared outside the loop, the loop itself, the seemingly repetitive code inside the loop and all the if-else statements!! I needed to refractor this. So back to thinking about the 5 steps, it appears the first 4 steps are repeated on BST instances, where each time all that is changing is the BST is becoming a subtree of itself. It seems like this can be done recursively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 1 - Find which direction insert should be</span>
</span><span class='line'>    <span class="c1"># 2a - If nil insert into that location</span>
</span><span class='line'>    <span class="c1"># 2b - Else call insert method again on that subtree</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
With recursion I am able to clean up the code to something I am satisfied with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 1 - Find which direction insert should be √</span>
</span><span class='line'>    <span class="c1"># 2a - If nil insert into that location √</span>
</span><span class='line'>    <span class="c1"># 2b - Else call insert method again on that subtree √</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">&gt;=</span> <span class="n">data</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">left</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">?</span> <span class="nb">self</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="no">BST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">right</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">?</span> <span class="nb">self</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="no">BST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">right</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
This was just the first step in creating the BST data structure. Next I&rsquo;ll explore deletion, searching and sorting in Binary Search Trees.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Open Source Contribution]]></title>
    <link href="http://chenghw.github.io/blog/2015/12/06/my-first-open-source-contribution/"/>
    <updated>2015-12-06T14:01:21-05:00</updated>
    <id>http://chenghw.github.io/blog/2015/12/06/my-first-open-source-contribution</id>
    <content type="html"><![CDATA[<p>Over this past weekend, I contributed to my first open source project! Special thanks to <a href='https://twitter.com/aidanfeldman/'>Aidan Feldman</a> and <a href='https://twitter.com/tutec/'>Tute Costa</a> for organizing this <a href='http://www.meetup.com/hackerhours/'>meetup</a> at the <a href='https://thoughtbot.com/'>Thoughtbot</a> offices in New York City.</p>

<p>To me, contributing to a real world open source project seemed scary and far from reality. Who am I to contribute with only 10 weeks programming experience. I feel I am not the only person who thinks this. However, after this meetup I&rsquo;d like to say that that fear is gone and it have been replaced with excitement for the future. I want to share some tips I learned at the meetup from the mentors and the overall experience that got me over that fear. Hopefully this helps those in taking their first steps into the open source community.</p>

<p>Quickly I&rsquo;m going to go over the work flow with open source projects (my open source hub of choice is <a href='https://www.github.com/'>github</a>).</p>

<ol>
  <li><strong>FORK</strong> their repo and clone from your fork. <strong>DO NOT</strong> clone straight from their repo!</li>
  <li>Make a <strong>BRANCH</strong>! If you are going to start editing, make a branch off your forked repo.</li>
  <li>Once you have made changes and wish to submit them to the creators, make a <strong>PULL</strong> request with an explanation of your edits.</li>
</ol>




<ol>
  <li>Best open source projects for you may be those you already use</li>
  <ul>
    <li>You already know the purpose and uses</li>
    <li>Reading through their source code will improve your understand of the project</li>
    <li>Examples:</li>
    <ul>
      <li>Ruby gems</li>
    </ul>
  </ul>
  <li>Going into open source projects you've never used</li>
    <ul>
      <li>No fear, just try to install the project</li>
      <li>Installation and working with their readme may be where you can contribute</li>
    </ul>
  <li>Documentation</li>
  <ul>
    <li>Creators probably haven't installed their project on a machine since they first created it</li>
    <li>Edit readme to help new comers with installation</li>
  </ul>
  <li>Next Steps</li>
  <ul>
    <li>Explore their project in how it works and its uses</li>
    <li>Browse their source code</li>
    <li>Take a look at their current issues</li>
    <li>Or even raise an issue of your own</li>
    <li>Rinse and repeat</li>
  </ul>
</ol>


<p>Happy contributing!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Toolbox]]></title>
    <link href="http://chenghw.github.io/blog/2015/11/12/javascript-toolbox/"/>
    <updated>2015-11-12T16:51:50-05:00</updated>
    <id>http://chenghw.github.io/blog/2015/11/12/javascript-toolbox</id>
    <content type="html"><![CDATA[<p>Coming from Ruby to JavaScript was more difficult than I thought it would be. The main difference to me: Documentation. Ruby has <a href='https://ruby-doc.org/'>ruby-doc.org</a> which has a well written and well organized dictionary for the entire language. While Javascript, I was primarily looking through <a href='http://www.w3schools.com/js/default.asp'>w3schools</a> and <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference'>Modzilla&rsquo;s</a> documentation. Both not as well organized compared to Ruby&rsquo;s. A part of my learning process is knowing what is available to me. Nothing I found was to my liking so I decided to gather all the information on the basic methods. What I came up with was surprisingly small. The JavaScript methods library was tiny compared to Ruby. So I compiled most of the methods (ones that I saw useful for me at this moment) for Numbers, Strings and Arrays with definitions and examples along with each.</p>

<table style="width:100%">
  <strong>Number</strong>
  <tr>
    <th align='center'>Method</th>
    <th align='center'>Description</th>
    <th align='center'>Example</th>
  </tr>
  <tr>
    <td>#toString()</td>
    <td>Returns a string of that number</td>
    <td>100.toString()<br>#=> "100"</td>
  </tr>
  <tr>
    <td>#toExponential(num=0)</td>
    <td>Returns the exponential of a float as a string, cannot be an integer (num option of how many decimal places)</td>
    <td>150.0.toExponential(4)<br>#=> "1.5000e+2"</td>
  </tr> 
  <tr>
    <td>#toFixed(num=0)</td>
    <td>Returns a string with the decimal places fixed to the num and rounds</td>
    <td>150.3261.toFixed(2)<br>#=> "150.33"</td>
  </tr> 
  <tr>
    <td>#toPrecision(num=length)</td>
    <td>Returns a string of the number with a fixed length from num</td>
    <td>150.3261.toPrecision(2)<br>#=> "1.5e+2"</td>
  </tr> 
</table>




<table style="width:100%">
  <strong>String</strong>
  <tr>
    <th align='center'>Method</th>
    <th align='center'>Description</th>
    <th align='center'>Example</th>
  </tr>
  <tr>
    <td>#indexOf(string)</td>
    <td>Returns the index of the <strong>first</strong> occurrence, returns -1 if none are found</td>
    <td>'hello'.indexOf('l');<br>#=> 2</td>
  </tr>
  <tr>
    <td>#indexLastOf(string)</td>
    <td>Returns the index of the <strong>last</strong> occurrence, returns -1 if none are found</td>
    <td>'welcome'.indexLastOf('e');<br>#=> 6</td>
  </tr> 
  <tr>
    <td>#search(string)</td>
    <td>Same as <strong>#indexOf(string)</strong> except it allows for the search of regular expressions</td>
    <td>'t0'.search(/[0-9]/);<br>#=> 1</td>
  </tr> 
  <tr>
    <td>#match(string)</td>
    <td>Searches a string against a string or regular expression and returns the match in an array</td>
    <td>'mY'.match(/[A-Z]/);<br>#=> ["Y"]</td>
  </tr> 
  <tr>
    <td>#charAt(num)</td>
    <td>Returns the character at the num index and returned empty string if out of range</td>
    <td>'blog'.charAt(2);<br>#=> "o"</td>
  </tr>
  <tr>
    <td>#split('x')</td>
    <td>Splits string by 'x' into an array</td>
    <td>'string'.split('');<br>#=> ["s", "t", "r", "i", "n", "g"]</td>
  </tr>
  <tr>
    <td>#concat(*args)</td>
    <td>Takes in as many string arguments and combines them into one</td>
    <td>'java'.concat('scr', 'ipt');<br>#=> "javascript"</td>
  </tr>
  <tr>
    <td>#slice(num1, num2)</td>
    <td>Returns the sting from index num1 to num2 not including num2, can accept negative numbers</td>
    <td>'table'.slice(1,-1);<br>#=> "abl"</td>
  </tr>
  <tr>
    <td>#substring(num1, num2)</td>
    <td>Same as <strong>#slice(num1, num2)</strong> except it cannot accept negative numbers</td>
    <td>'enjoy'.substring(1, 3);<br>#=> "ej"</td>
  </tr>
  <tr>
    <td>#substr(num1, num2)</td>
    <td>Returns a string where the substring starts at index of num1 to num2 characters</td>
    <td>'yourself'.substr(1, 4);<br>#=> "ours"</td>
  </tr>
  <tr>
    <td>#replace(string1, string2)</td>
    <td>Finds and replaces the first instance of string1 with string2, then returns the resulting string</td>
    <td>'flatiron'.replace('iron', 'school');<br>#=> "flatschool"</td>
  </tr>
  <tr>
    <td>#toUpperCase()</td>
    <td>Uppercase the entire string</td>
    <td>'flatiron'.upUpperCase();<br>#=> "FLATIRON"</td>
  </tr>
  <tr>
    <td>#toLowerCase()</td>
    <td>Lowercase the entire string</td>
    <td>'FLATIRON'.upUpperCase();<br>#=> "flatiron"</td>
  </tr>
  <tr>
    <td>#trim()</td>
    <td>Removes white space at the beginning and end of a string</td>
    <td>'  flatiron?  '.trim()<br>#=> "flatiron?"</td>
  </tr>
</table>




<table style="width:100%">
  <strong>Array</strong>
  <tr>
    <th align='center'>Method</th>
    <th align='center'>Description</th>
    <th align='center'>Example</th>
  </tr>
  <tr>
    <td>#concat(*arrs)</td>
    <td>Join multiple arrays into one</td>
    <td>[1,2,3].concat([4,5,6], [7,8,9]);<br>#=> [1,2,3,4,5,6,7,8,9]</td>
  </tr>
  <tr>
    <td>#join('x')</td>
    <td>Joins each array element into a string separated by 'x' ('x' is optional, where the default is ',')</td>
    <td>['flatiron', 'school'].join(' ');<br>#=> "flatiron school"</td>
  </tr> 
  <tr>
    <td>#indexOf(ele)</td>
    <td>Search array for the <strong>first</strong> matching element and returns the index, -1 if nothing is found</td>
    <td>[1,2,3,2].indexOf(2);<br>#=> 1</td>
  </tr> 
  <tr>
    <td>#lastIndexOf(ele)</td>
    <td>Search array for <strong>last</strong> matching element and returns the index, -1 if nothing is found</td><td>[1,2,3,2].indexOf(2);<br>#=> 3</td>
  </tr> 
  <tr>
    <td>#pop()</td>
    <td>Removes and returns the last element of the array</td><td>[1,2,3,2].pop();<br>#=> 2</td>
  </tr> 
  <tr>
    <td>#push(ele)</td>
    <td>Adds element to the end of the array and returns the length of the new array</td><td>['h','e','l','l'].push('o');<br>#=> 5</td>
  </tr> 
  <tr>
    <td>#reverse()</td>
    <td>Reserve the elements of the array and returns the new array, this is destructive</td>
    <td>[1,2,3].reverse();<br>#=> [3,2,1]</td>
  </tr>
  <tr>
    <td>#shift()</td>
    <td>Removes and returns the first element of the array</td>
    <td>[1,2,3,2].shift();<br>#=> 1</td>
  </tr>
  <tr>
    <td>#unshift()</td>
    <td>Adds element to the beginning of the array and returns the length of the new array</td>
    <td>[1,2,3,2].unshift(1);<br>#=> 5</td>
  </tr>
  <tr>
    <td>#sort()</td>
    <td>Sorts and returns the array, this is destructive</td>
    <td>[3,2,1].sort();<br>#=> [1,2,3]</td>
  </tr>
    <tr>
    <td>#slice(num1, num2)</td>
    <td>Starts at index num1 and slices to index num2 not included, and returns the resulting array.</td>
    <td>[0,1,2,3,4,5].slice(1,3);<br>#=> [1,2]</td>
  </tr>
  <tr>
    <td>#splice(num1, num2, *args)</td>
    <td>num1 represents the starting point, num2 represents the number of elements to remove and the *args is optional for any additions to be added to the array. Return value is an array of the removed elements</td>
    <td>["h", "e", "l", "l", "o"].splice(1,2,9,8,7) => ["h", 9, 8, 7, "l", "o"] <br>#=> ["e", "l"]</td>
  </tr>
</table>




<table style="width:100%">
  <strong>Array Enumerable</strong>
  <tr>
    <th align='center'>Method</th>
    <th align='center'>Description</th>
    <th align='center'>Example</th>
  </tr>
  <tr>
    <td>#every( function( element, index, array ) { return condition } )</td>
    <td>Evaluates to true if callback function evaluates to be true for each element</td>
    <td>[1,2,3].every( function( element ) { return isFinite( element ) } );<br>#=> true</td>
  </tr>
  <tr>
    <td>#filter( function( element, index, array ) { return condition } )</td>
    <td>Like #select in Ruby, returns an array with elements who's callback function returned true</td>
    <td>[1,2,3,4,5].filter( function( element ) { return element > 3 } );<br>#=> [4, 5]</td>
  </tr> 
  <tr>
    <td>#forEach( function( element, index, array ) { do something } )</td>
    <td>Like #each in Ruby, does something for each element in the array</td>
    <td>[1,2].forEach( function( element, index, array ) { console.log( element ) } );<br>#=> 1 #=> 2</td>
  </tr> 
  <tr>
    <td>#map( function( element, index, array ) { return something } )</td>
    <td>Like #each in Ruby, creates an array of same length with returned values</td>
    <td>[1,2].map( function( element, index, array ){ return element + index } );<br>#=> [1, 3]</td>
  </tr> 
  <tr>
    <td>#reduce( function( previousValue, currentValue, index, array ) { return new previousValue }, initialValue )</td>
    <td>Similar to #inject in Ruby, iterates through each element where previousValue initially starts off as initialValue and currentValue is the element. The return of the first iteration becomes the new previousValue and so on where the return is the final return.</td>
    <td>[1,2,3].reduce( function( a, b, index, array ) { return a+b }, 10 );<br>#=> 16</td>
  </tr> 
  <tr>
    <td>#some( function( element, index, array ) { return condition } )</td>
    <td>Evaluates to true if callback function evaluates to be true for at least one element</td>
    <td>[1,2,3].some( function( element ) { return element/2 == 1 } );<br>#=> true</td>
  </tr> 
</table>




<table style="width:100%">
  <strong>Global Methods</strong>
  <tr>
    <th align='center'>Method</th>
    <th align='center'>Description</th>
    <th align='center'>Example</th>
  </tr>
  <tr>
    <td>#eval()</td>
    <td>Evaluates and executes a string</td>
    <td>eval('1+1');<br>#=> 2</td>
  </tr>
  <tr>
    <td>#isFinite()</td>
    <td>Returns true or false either the input is a number or not</td>
    <td>isFinite(Infinity);<br>#=> false</td>
  </tr> 
  <tr>
    <td>#isNaN()</td>
    <td>Returns true for anything that is not a number</td>
    <td>isNaN(NaN);<br>#=> true</td>
  </tr> 
  <tr>
    <td>#Number()</td>
    <td>Converts input into a number</td>
    <td>Number('a');<br>#=> NaN</td>
  </tr> 
  <tr>
    <td>#parseFloat()</td>
    <td>Converts input into a float</td>
    <td>parseFloat('3.14');<br>#=> 3.14</td>
  </tr> 
  <tr>
    <td>#parseInt()</td>
    <td>Converts input into a integer</td>
    <td>parseInt('3.14');<br>#=> 3</td>
  </tr> 
  <tr>
    <td>#String()</td>
    <td>Converts input into a string</td>
    <td>String(3.14);<br>#=> "3.14"</td>
  </tr> 
</table>


<p><strong>#splice(num1, num2, *args) examples</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span> <span class="p">];</span>
</span><span class='line'><span class="nx">array1</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="err">#</span><span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span>
</span><span class='line'><span class="nx">array1</span><span class="p">;</span>
</span><span class='line'><span class="err">#</span><span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span> <span class="p">];</span>
</span><span class='line'><span class="nx">array2</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">3.33</span><span class="p">,</span> <span class="mf">3.67</span> <span class="p">);</span>
</span><span class='line'><span class="err">#</span><span class="o">=&gt;</span> <span class="p">[]</span>
</span><span class='line'><span class="nx">array2</span><span class="p">;</span>
</span><span class='line'><span class="err">#</span><span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mf">3.33</span><span class="p">,</span> <span class="mf">3.67</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">array3</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span> <span class="p">];</span>
</span><span class='line'><span class="nx">array3</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">,</span> <span class="s1">&#39;four&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="err">#</span><span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="p">]</span>
</span><span class='line'><span class="nx">array3</span><span class="p">;</span>
</span><span class='line'><span class="err">#</span><span class="o">=&gt;</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span><span class="p">,</span>  <span class="s1">&#39;four&#39;</span><span class="p">,</span> <span class="mi">5</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
Lastly, an additional note for the Array Enumerable. Coming from Ruby, enumerables were always used entirely along with being told to never use <strong>for loops</strong>. While in JavsScript, it seems to be the opposite where <strong>for loops</strong> are more prevalent. For all the Rubyist who shy away from <strong>for loops</strong> and would much rather use #forEach, well <strong>for loops</strong> aren&rsquo;t that bad. Compared to the #forEach method, <strong>for loops</strong> are about 95% faster.<br>
<a href="http://jsperf.com/foreach-vs-loop">http://jsperf.com/foreach-vs-loop</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procs and Lambdas]]></title>
    <link href="http://chenghw.github.io/blog/2015/10/27/procs-and-lambdas/"/>
    <updated>2015-10-27T09:15:10-04:00</updated>
    <id>http://chenghw.github.io/blog/2015/10/27/procs-and-lambdas</id>
    <content type="html"><![CDATA[<p>I am a big believer in fundamentals and foundation. In grade school I was horrific in Spanish. Being close to failing and having to repeat the previous years Spanish class, my parents sent me to summer school. I learned the fundamentals of the language and went into the following year understanding concepts which I didn't have the tools to comprehend previously.</p>




<p>We were told a quote early on in the semester which has stuck with me. It was along the lines of, "The problem isn't with Rails, but with your Ruby." I took away to truly understand Rails was to truly understand the fundaments and the foundation that Rails was built on.</p>




<p>Before diving into Proc and Lambdas which I saw as one of those fundamentals/building blocks of the Ruby language, we must go over what a Block is first.</p>




<h2>Blocks</h2>


<p>A block is a block of code or a code block, thus the name <strong>block</strong>. A list of instructions for your code to follow. Blocks can be identified by do...end or { }. There is a saying in Ruby land that everything in Ruby is an object, however that does not apply here. A block is not an object! Which brings us to procs and lambdas.</p>




<h2>Procs</h2>


<p>Proc, stands for <strong>proc</strong>edure, is a block of code which is an object. This means procs can be passed through in method arguments, be something a method returns and have methods called upon them.</p>


<figure class='code'><figcaption><span>Creating a proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">square</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Up until now we mostly been using blocks in enumerables. Procs can take the place of blocks in enumerables.</p>


<figure class='code'><figcaption><span>Using a proc in an enumerable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span> <span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">square</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">49</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But lets say you don&rsquo;t want to just pass in 1 value. Using an iterator now seems to not be the right tool for the job. There is the call method.</p>

<figure class='code'><figcaption><span>Call method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span> <span class="mi">15</span> <span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">square</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">225</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'> <span class="n">square</span><span class="o">.</span><span class="n">call</span><span class="p">(</span> <span class="mi">15</span> <span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">225</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another benefit procs over blocks is that they can be returned.</p>


<figure class='code'><figcaption><span>Proc as a return</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:coins</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@coins</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Team</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:status</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">result</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">status</span>
</span><span class='line'>      <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">coins</span> <span class="o">+=</span> <span class="mi">150</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">coins</span> <span class="o">-=</span> <span class="mi">100</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">player1</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">player2</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">team</span> <span class="o">=</span> <span class="no">Team</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">team</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="n">team</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="n">player1</span><span class="p">,</span> <span class="n">player2</span> <span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Player:0x007f9682936fa0 @coins=1150&gt;, #&lt;Player:0x007f968204d1a0 @coins=1150&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">player1</span><span class="o">.</span><span class="n">coins</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1150</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Lambda</h2>


<p>A lambda is also a block of code which is an object. This is because a lambda is apart of the Proc class.</p>


<figure class='code'><figcaption><span>Creating a lambda</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">woofs</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="s2">&quot;Woof!&quot;</span><span class="o">*</span><span class="n">x</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">woofs</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="s2">&quot;Woof!&quot;</span><span class="o">*</span><span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="ss">Proc</span><span class="p">:</span><span class="mh">0x007f9683183dc0</span><span class="err">@</span><span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">152</span> <span class="p">(</span><span class="nb">lambda</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Procs vs Lambdas</h2>


<p>1 - Procs and lambdas treat arguments differently. Procs do not check for the correct number or arguments while lambdas do.</p>


<figure class='code'><figcaption><span>Argument validation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hello</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">goodbye</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;Good-bye </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">hello</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello !&quot;</span>
</span><span class='line'><span class="n">goodbye</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">ArgumentError</span><span class="p">:</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">0</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 - Proc and lambdas treat returns differently. A return inside a proc will be treated as a return for the entire method which it is inside, while a return inside a lambda will only be treated as the return for inside the lambda.</p>


<figure class='code'><figcaption><span>Returns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_return</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hi from inside the proc!&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Do you see me?&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Does this even show up?&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc_return</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Hi from inside the proc!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_return</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hi from inside the lambda&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Do you see me?&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">lambda</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Does this even show up?&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda_return</span>
</span><span class='line'><span class="no">Hi</span> <span class="n">from</span> <span class="n">inside</span> <span class="n">the</span> <span class="nb">lambda</span>
</span><span class='line'><span class="no">Does</span> <span class="n">this</span> <span class="n">even</span> <span class="n">show</span> <span class="n">up?</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>




<h2> & </h2>


<figure class='code'><figcaption><span>& Clarification</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sym</span> <span class="o">=</span> <span class="ss">:upcase</span>
</span><span class='line'><span class="o">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="o">].</span><span class="n">map</span><span class="p">(</span> <span class="o">&amp;</span><span class="ss">:upcase</span> <span class="p">)</span>
</span><span class='line'><span class="o">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">letter</span><span class="o">|</span> <span class="n">letter</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> <span class="n">sym</span> <span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span> <span class="s2">&quot;B&quot;</span><span class="p">,</span> <span class="s2">&quot;C&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<h2> Additional Examples </h2>


<figure class='code'><figcaption><span>Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">animal_sounds</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;cat&#39;</span> <span class="o">=&gt;</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="s2">&quot;Meow&quot;</span><span class="o">*</span><span class="n">x</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;dog&#39;</span> <span class="o">=&gt;</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="s2">&quot;Woof&quot;</span><span class="o">*</span><span class="n">x</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;pig&#39;</span> <span class="o">=&gt;</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="s2">&quot;Oink&quot;</span><span class="o">*</span><span class="n">x</span><span class="p">},</span>
</span><span class='line'>  <span class="s1">&#39;bird&#39;</span> <span class="o">=&gt;</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="s2">&quot;Kakaw&quot;</span><span class="o">*</span><span class="n">x</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">animal_sounds</span><span class="o">[</span><span class="s1">&#39;bird&#39;</span><span class="o">].</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;KakawKakaw&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Declarative Languages and Its Logical Processing Order]]></title>
    <link href="http://chenghw.github.io/blog/2015/10/12/a-declarative-languages-and-its-logical-processing-order/"/>
    <updated>2015-10-12T23:02:42-04:00</updated>
    <id>http://chenghw.github.io/blog/2015/10/12/a-declarative-languages-and-its-logical-processing-order</id>
    <content type="html"><![CDATA[<p>After two intense weeks at Flatiron School learning Ruby, we&rsquo;ve moved onto SQL, a totally different langauge. Where Ruby is an object oriented programming language used in web development, SQL is a declarative language designed to manage and query databases.</p>

<p>The transition for me was very tough going from Ruby to SQL. Ruby being a very literal language where it reacts to everything I type typically the way I would expect. Not to say I don&rsquo;t run into errors, but with tools like Pry and RSpec, debugging is managable. While this do that. For each element do this. The Ruby flow control made sense.</p>

<p>Now for SQL, I read it like any other language I encountered, from beginning to end, top to bottom. It made sense in the beginning, but started to not make sense when I got introduced to aggregate functions. Using a &lsquo;COUNT&rsquo; with a &lsquo;WHERE&rsquo; created errors which is where I learned to implement &lsquo;HAVING&rsquo;. Essentially serving the same purpose as &lsquo;WHERE&rsquo; for the query I was making, but one was necessary for aggregate functions. This sparked my curiosity and I asked myself, do I really know what is happening here?</p>

<p>My answer. No. I didn&rsquo;t really know what was happening behind the scenes and how my queries were being compiled. So I posed the question. If reading the query from beginning to end is not correct, then there must be some sort of order of opperation that SQL follows in reading syntax. But the answer I found was very unsatisfying. SQL is not like any language that I have encountered. SQL is a declarative language. Declarative language syntax is describing what the program should return rather than how this task should be accomplished. In simple terms, you tell SQL what you want and SQL will find a way to get it for you on through its own methods.</p>

<p>But there must be still rules like how I have to use &lsquo;HAVING&rsquo; instead of &lsquo;WHILE&rsquo;!! Well, there is something that we can use in fact, for &lsquo;SELECT&rsquo; statements at least. &lsquo;Logical Processing Order&rsquo; determines the order of which objects are defined and made available to other sections of the &lsquo;SELECT&rsquo; statement.</p>

<ol><strong>Logical Processing Order</strong>
<li>FROM</li>
<li>ON</li>
<li>JOIN</li>
<li>WHERE</li>
<li>GROUP BY</li>
<li>WITH CUBE or WITH ROLLUP</li>
<li>HAVING</li>
<li>SELECT</li>
<li>DISTINCT</li>
<li>ORDER BY</li>
<li>TOP (LIMIT)</li>
</ol>


<p>Using the &lsquo;Logical Processing Order&rsquo; for &lsquo;SELECT&rsquo; statements, I was able to break down the task of creating &lsquo;SELECT&rsquo; statements into more managable steps.</p>

<p>Step #1 - Processes 1-3, what tables will I need to join for me to have all the information I need.</p>

<p>Step #2 - Processes 4-7, are there aggregate functions I need to account? If so, then I know I will need a &lsquo;GROUP BY&rsquo;, and if there is conditional logic to account for then I will need to use &lsquo;HAVING&rsquo; instead of &lsquo;WHERE&rsquo;.</p>

<p>Step #3 - Process 8, what variables do I want in my &lsquo;SELECT&rsquo; statement and do I want to rename any with &lsquo;AS&rsquo;?</p>

<p>Step #4 - Processes 9-11, am I looking for the query to output in a specific order or by a limit?</p>

<p>Knowing the control flow and asking the right questions.</p>
]]></content>
  </entry>
  
</feed>
